---
image: registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:25dfc5ecfc1614d67a9768b8cebb58367cac16c5e541646bb2dc13d75c705bdd
name: network-observability-operator.v1.4.0
package: netobserv-operator
properties:
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1alpha1
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1beta1
- type: olm.package
  value:
    packageName: netobserv-operator
    version: 1.4.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "flows.netobserv.io/v1alpha1",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "agent": {
                "ebpf": {
                  "cacheActiveTimeout": "5s",
                  "cacheMaxFlows": 100000,
                  "excludeInterfaces": [
                    "lo"
                  ],
                  "imagePullPolicy": "IfNotPresent",
                  "interfaces": [],
                  "kafkaBatchSize": 10485760,
                  "logLevel": "info",
                  "resources": {
                    "limits": {
                      "memory": "800Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "50Mi"
                    }
                  },
                  "sampling": 50
                },
                "type": "EBPF"
              },
              "consolePlugin": {
                "autoscaler": {
                  "maxReplicas": 3,
                  "metrics": [
                    {
                      "resource": {
                        "name": "cpu",
                        "target": {
                          "averageUtilization": 50,
                          "type": "Utilization"
                        }
                      },
                      "type": "Resource"
                    }
                  ],
                  "minReplicas": 1,
                  "status": "DISABLED"
                },
                "imagePullPolicy": "IfNotPresent",
                "logLevel": "info",
                "port": 9001,
                "portNaming": {
                  "enable": true,
                  "portNames": {
                    "3100": "loki"
                  }
                },
                "quickFilters": [
                  {
                    "default": true,
                    "filter": {
                      "dst_namespace!": "openshift-,netobserv",
                      "src_namespace!": "openshift-,netobserv"
                    },
                    "name": "Applications"
                  },
                  {
                    "filter": {
                      "dst_namespace": "openshift-,netobserv",
                      "src_namespace": "openshift-,netobserv"
                    },
                    "name": "Infrastructure"
                  },
                  {
                    "default": true,
                    "filter": {
                      "dst_kind": "Pod",
                      "src_kind": "Pod"
                    },
                    "name": "Pods network"
                  },
                  {
                    "filter": {
                      "dst_kind": "Service"
                    },
                    "name": "Services network"
                  }
                ],
                "register": true
              },
              "deploymentModel": "DIRECT",
              "exporters": [],
              "kafka": {
                "address": "kafka-cluster-kafka-bootstrap.netobserv",
                "tls": {
                  "caCert": {
                    "certFile": "ca.crt",
                    "name": "kafka-cluster-cluster-ca-cert",
                    "type": "secret"
                  },
                  "enable": false,
                  "userCert": {
                    "certFile": "user.crt",
                    "certKey": "user.key",
                    "name": "flp-kafka",
                    "type": "secret"
                  }
                },
                "topic": "network-flows"
              },
              "loki": {
                "batchSize": 10485760,
                "batchWait": "1s",
                "maxBackoff": "5s",
                "maxRetries": 2,
                "minBackoff": "1s",
                "tls": {
                  "caCert": {
                    "certFile": "service-ca.crt",
                    "name": "loki-gateway-ca-bundle",
                    "type": "configmap"
                  },
                  "enable": false,
                  "insecureSkipVerify": false
                },
                "url": "http://loki.netobserv.svc:3100/"
              },
              "namespace": "netobserv",
              "processor": {
                "dropUnusedFields": true,
                "imagePullPolicy": "IfNotPresent",
                "kafkaConsumerAutoscaler": null,
                "kafkaConsumerBatchSize": 10485760,
                "kafkaConsumerQueueCapacity": 1000,
                "kafkaConsumerReplicas": 3,
                "logLevel": "info",
                "metrics": {
                  "ignoreTags": [
                    "egress",
                    "packets"
                  ],
                  "server": {
                    "port": 9102
                  }
                },
                "port": 2055,
                "profilePort": 6060,
                "resources": {
                  "limits": {
                    "memory": "800Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                }
              }
            }
          },
          {
            "apiVersion": "flows.netobserv.io/v1beta1",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "agent": {
                "ebpf": {
                  "cacheActiveTimeout": "5s",
                  "cacheMaxFlows": 100000,
                  "excludeInterfaces": [
                    "lo"
                  ],
                  "imagePullPolicy": "IfNotPresent",
                  "interfaces": [],
                  "kafkaBatchSize": 10485760,
                  "logLevel": "info",
                  "privileged": false,
                  "resources": {
                    "limits": {
                      "memory": "800Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "50Mi"
                    }
                  },
                  "sampling": 50
                },
                "type": "EBPF"
              },
              "consolePlugin": {
                "autoscaler": {
                  "maxReplicas": 3,
                  "metrics": [
                    {
                      "resource": {
                        "name": "cpu",
                        "target": {
                          "averageUtilization": 50,
                          "type": "Utilization"
                        }
                      },
                      "type": "Resource"
                    }
                  ],
                  "minReplicas": 1,
                  "status": "DISABLED"
                },
                "enable": true,
                "imagePullPolicy": "IfNotPresent",
                "logLevel": "info",
                "port": 9001,
                "portNaming": {
                  "enable": true,
                  "portNames": {
                    "3100": "loki"
                  }
                },
                "quickFilters": [
                  {
                    "default": true,
                    "filter": {
                      "dst_namespace!": "openshift-,netobserv",
                      "src_namespace!": "openshift-,netobserv"
                    },
                    "name": "Applications"
                  },
                  {
                    "filter": {
                      "dst_namespace": "openshift-,netobserv",
                      "src_namespace": "openshift-,netobserv"
                    },
                    "name": "Infrastructure"
                  },
                  {
                    "default": true,
                    "filter": {
                      "dst_kind": "Pod",
                      "src_kind": "Pod"
                    },
                    "name": "Pods network"
                  },
                  {
                    "filter": {
                      "dst_kind": "Service"
                    },
                    "name": "Services network"
                  }
                ],
                "register": true
              },
              "deploymentModel": "DIRECT",
              "exporters": [],
              "kafka": {
                "address": "kafka-cluster-kafka-bootstrap.netobserv",
                "tls": {
                  "caCert": {
                    "certFile": "ca.crt",
                    "name": "kafka-cluster-cluster-ca-cert",
                    "type": "secret"
                  },
                  "enable": false,
                  "userCert": {
                    "certFile": "user.crt",
                    "certKey": "user.key",
                    "name": "flp-kafka",
                    "type": "secret"
                  }
                },
                "topic": "network-flows"
              },
              "loki": {
                "batchSize": 10485760,
                "batchWait": "1s",
                "enable": true,
                "maxBackoff": "5s",
                "maxRetries": 2,
                "minBackoff": "1s",
                "statusTls": {
                  "caCert": {
                    "certFile": "service-ca.crt",
                    "name": "loki-ca-bundle",
                    "type": "configmap"
                  },
                  "enable": false,
                  "insecureSkipVerify": false,
                  "userCert": {
                    "certFile": "tls.crt",
                    "certKey": "tls.key",
                    "name": "loki-query-frontend-http",
                    "type": "secret"
                  }
                },
                "tls": {
                  "caCert": {
                    "certFile": "service-ca.crt",
                    "name": "loki-gateway-ca-bundle",
                    "type": "configmap"
                  },
                  "enable": false,
                  "insecureSkipVerify": false
                },
                "url": "http://loki.netobserv.svc:3100/"
              },
              "namespace": "netobserv",
              "processor": {
                "conversationEndTimeout": "10s",
                "conversationHeartbeatInterval": "30s",
                "conversationTerminatingTimeout": "5s",
                "dropUnusedFields": true,
                "imagePullPolicy": "IfNotPresent",
                "kafkaConsumerAutoscaler": null,
                "kafkaConsumerBatchSize": 10485760,
                "kafkaConsumerQueueCapacity": 1000,
                "kafkaConsumerReplicas": 3,
                "logLevel": "info",
                "logTypes": "FLOWS",
                "metrics": {
                  "disableAlerts": [],
                  "ignoreTags": [
                    "egress",
                    "packets",
                    "nodes-flows",
                    "namespaces-flows",
                    "workloads-flows",
                    "namespaces"
                  ],
                  "server": {
                    "port": 9102
                  }
                },
                "port": 2055,
                "profilePort": 6060,
                "resources": {
                  "limits": {
                    "memory": "800Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                }
              }
            }
          }
        ]
      capabilities: Seamless Upgrades
      categories: Monitoring
      console.openshift.io/plugins: '["netobserv-plugin"]'
      containerImage: registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:24afa1aa7757a3030af0d35e278041bf99700f388b691f32ece3c08f1311d944
      createdAt: 2023-09-21T16:02:41
      description: Network flows collector and monitoring solution
      operatorframework.io/cluster-monitoring: "true"
      operatorframework.io/suggested-namespace: openshift-netobserv-operator
      operators.openshift.io/valid-subscription: '["OpenShift Kubernetes Engine",
        "OpenShift Container Platform", "OpenShift Platform Plus"]'
      operators.operatorframework.io/builder: operator-sdk-v1.25.3
      operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
      repository: https://github.com/netobserv/network-observability-operator
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: FlowCollector is the Schema for the flowcollectors API, which
          pilots and configures netflow collection.
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        version: v1alpha1
      - description: '`FlowCollector` is the schema for the network flows collection
          API, which pilots and configures the underlying deployments.'
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        version: v1beta1
    description: |
      Network Observability is an OpenShift operator that deploys a monitoring pipeline to collect and enrich network flows that are produced by the Network Observability eBPF agent.

      The operator provides dashboards, metrics, and keeps flows accessible in a queryable log store, Grafana Loki. When a `FlowCollector` instance is created, new views are available in the Console.

      ## Dependencies

      ### Loki

      [Loki](https://grafana.com/oss/loki/), from GrafanaLabs, is the backend that is used to store all collected flows. The NetObserv Operator does not install Loki directly, however we provide some guidance to help you there.

      - For a production or production-like environment usage, refer to [the operator documentation](https://docs.openshift.com/container-platform/latest/networking/network_observability/installing-operators.html).

      - For a quick try that is not suitable for production and not scalable (it deploys a single pod, configures a 1GB storage PVC, with 24 hours of retention), you can simply run the following commands:

      ```
      oc create namespace netobserv
      oc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/252bb624cf0425a1b66f59ce68fb939f246ef77b/examples/zero-click-loki/1-storage.yaml) -n netobserv
      oc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/252bb624cf0425a1b66f59ce68fb939f246ef77b/examples/zero-click-loki/2-loki.yaml) -n netobserv
      ```

      ### Kafka

      [Apache Kafka](https://kafka.apache.org/) can optionally be used for a more resilient and scalable architecture. You can use for instance [Strimzi](https://strimzi.io/), an operator-based distribution of Kafka for Kubernetes and OpenShift.

      ### Grafana

      [Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.

      ## Configuration

      The `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/1.0.3/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/1.0.3/config/samples/flows_v1beta1_flowcollector.yaml).

      To edit configuration in cluster, run:

      ```bash
      oc edit flowcollector cluster
      ```

      As it operates cluster-wide, only a single `FlowCollector` is allowed, and it has to be named `cluster`.

      A couple of settings deserve special attention:

      - Sampling (`spec.agent.ebpf.sampling`): a value of `100` means: one flow every 100 is sampled. `1` means all flows are sampled. The lower it is, the more flows you get, and the more accurate are derived metrics, but the higher amount of resources are consumed. By default, sampling is set to 50 (ie. 1:50). Note that more sampled flows also means more storage needed. We recommend to start with default values and refine empirically, to figure out which setting your cluster can manage.

      - Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you may have to configure differently if you used another installation method.

      - Quick filters (`spec.consolePlugin.quickFilters`): configure preset filters to be displayed in the Console plugin. They offer a way to quickly switch from filters to others, such as showing / hiding pods network, or infrastructure network, or application network, etc. They can be tuned to reflect the different workloads running on your cluster. For a list of available filters, [check this page](https://github.com/netobserv/network-observability-operator/blob/1.0.3/docs/QuickFilters.md).

      - Kafka (`spec.deploymentModel: KAFKA` and `spec.kafka`): when enabled, integrates the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Kafka can provide better scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)). Assumes Kafka is already deployed and a topic is created.

      - Exporters (`spec.exporters`) an optional list of exporters to which to send enriched flows. KAFKA and IPFIX exporters are supported. This allows you to define any custom storage or processing that can read from Kafka or use the IPFIX standard.

      ## Further reading

      Please refer to the documentation on GitHub for more information.

      This documentation includes:

      - An [overview](https://github.com/netobserv/network-observability-operator#openshift-console) of the features, with screenshots
      - A [performance](https://github.com/netobserv/network-observability-operator#performance-fine-tuning) section, for fine-tuning
      - A [security](https://github.com/netobserv/network-observability-operator#securing-data-and-communications) section
      - An [F.A.Q.](https://github.com/netobserv/network-observability-operator#faq--troubleshooting) section
    displayName: Network Observability
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - network observability
    - ebpf
    - flow tracing
    - flows
    - topology
    - network
    - observability
    labels:
      operatorframework.io/arch.amd64: supported
      operatorframework.io/arch.arm64: supported
      operatorframework.io/arch.ppc64le: supported
      operatorframework.io/arch.s390x: supported
      operatorframework.io/os.linux: supported
    links:
    - name: Project page
      url: https://github.com/netobserv/network-observability-operator
    - name: Issue tracker
      url: https://github.com/netobserv/network-observability-operator/issues
    - name: Discussion board
      url: https://github.com/netobserv/network-observability-operator/discussions
    maintainers:
    - email: jpinsonn@redhat.com
      name: Julien Pinsonneau
    - email: jtakvori@redhat.com
      name: Joel Takvorian
    - email: kmeth@redhat.com
      name: Kalman Meth
    - email: mmahmoud@redhat.com
      name: Mohamed S. Mahmoud
    - email: ocazade@redhat.com
      name: Olivier Cazade
    - email: rschaffe@redhat.com
      name: Ronen Schaffer
    - email: stlee@redhat.com
      name: Steven Lee
    maturity: stable
    minKubeVersion: 1.23.0
    provider:
      name: Red Hat
      url: https://www.redhat.com
relatedImages:
- image: registry.redhat.io/network-observability/network-observability-console-plugin-rhel9@sha256:9feb17ebd651d8e55b177d4c1fb82ee434d0617233dd3e21c8fc97071afa4369
  name: console_plugin
- image: registry.redhat.io/network-observability/network-observability-ebpf-agent-rhel9@sha256:5c4c118987448fd7e730cc94e28405d0a869b9a5f3e3ac005c2491b92541df1f
  name: ebpf_agent
- image: registry.redhat.io/network-observability/network-observability-flowlogs-pipeline-rhel9@sha256:3f6d2e8f0cdec5b44c7ae153c67cd0b10f42cc2bc0139ac262fb23cfdfae47a5
  name: flowlogs_pipeline
- image: registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:25dfc5ecfc1614d67a9768b8cebb58367cac16c5e541646bb2dc13d75c705bdd
  name: ""
- image: registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:24afa1aa7757a3030af0d35e278041bf99700f388b691f32ece3c08f1311d944
  name: network-observability-rhel9-operator-24afa1aa7757a3030af0d35e278041bf99700f388b691f32ece3c08f1311d944-annotation
- image: registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:24afa1aa7757a3030af0d35e278041bf99700f388b691f32ece3c08f1311d944
  name: manager
- image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:fcb3b8ab93dfb5ef2b290e39ea5899dbb5e0c6d430370b8d281e59e74d94d749
  name: kube-rbac-proxy
schema: olm.bundle
