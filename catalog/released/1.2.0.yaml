image: registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:9ba226d0207edd7c9173333647353d3a7a0b5bfc32feb60ca5749dd6dc190c28
name: network-observability-operator.v1.2.0
package: netobserv-operator
properties:
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1alpha1
- type: olm.gvk
  value:
    group: flows.netobserv.io
    kind: FlowCollector
    version: v1beta1
- type: olm.package
  value:
    packageName: netobserv-operator
    version: 1.2.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "flows.netobserv.io/v1alpha1",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "agent": {
                "ebpf": {
                  "cacheActiveTimeout": "5s",
                  "cacheMaxFlows": 100000,
                  "excludeInterfaces": [
                    "lo"
                  ],
                  "imagePullPolicy": "IfNotPresent",
                  "interfaces": [],
                  "kafkaBatchSize": 10485760,
                  "logLevel": "info",
                  "resources": {
                    "limits": {
                      "memory": "800Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "50Mi"
                    }
                  },
                  "sampling": 50
                },
                "type": "EBPF"
              },
              "consolePlugin": {
                "autoscaler": {
                  "maxReplicas": 3,
                  "metrics": [
                    {
                      "resource": {
                        "name": "cpu",
                        "target": {
                          "averageUtilization": 50,
                          "type": "Utilization"
                        }
                      },
                      "type": "Resource"
                    }
                  ],
                  "minReplicas": 1,
                  "status": "DISABLED"
                },
                "imagePullPolicy": "IfNotPresent",
                "logLevel": "info",
                "port": 9001,
                "portNaming": {
                  "enable": true,
                  "portNames": {
                    "3100": "loki"
                  }
                },
                "quickFilters": [
                  {
                    "default": true,
                    "filter": {
                      "dst_namespace!": "openshift-,netobserv",
                      "src_namespace!": "openshift-,netobserv"
                    },
                    "name": "Applications"
                  },
                  {
                    "filter": {
                      "dst_namespace": "openshift-,netobserv",
                      "src_namespace": "openshift-,netobserv"
                    },
                    "name": "Infrastructure"
                  },
                  {
                    "default": true,
                    "filter": {
                      "dst_kind": "Pod",
                      "src_kind": "Pod"
                    },
                    "name": "Pods network"
                  },
                  {
                    "filter": {
                      "dst_kind": "Service"
                    },
                    "name": "Services network"
                  }
                ],
                "register": true
              },
              "deploymentModel": "DIRECT",
              "exporters": [],
              "kafka": {
                "address": "kafka-cluster-kafka-bootstrap.netobserv",
                "tls": {
                  "caCert": {
                    "certFile": "ca.crt",
                    "name": "kafka-cluster-cluster-ca-cert",
                    "type": "secret"
                  },
                  "enable": false,
                  "userCert": {
                    "certFile": "user.crt",
                    "certKey": "user.key",
                    "name": "flp-kafka",
                    "type": "secret"
                  }
                },
                "topic": "network-flows"
              },
              "loki": {
                "batchSize": 10485760,
                "batchWait": "1s",
                "maxBackoff": "5s",
                "maxRetries": 2,
                "minBackoff": "1s",
                "tls": {
                  "caCert": {
                    "certFile": "service-ca.crt",
                    "name": "loki-gateway-ca-bundle",
                    "type": "configmap"
                  },
                  "enable": false,
                  "insecureSkipVerify": false
                },
                "url": "http://loki.netobserv.svc:3100/"
              },
              "namespace": "netobserv",
              "processor": {
                "dropUnusedFields": true,
                "imagePullPolicy": "IfNotPresent",
                "kafkaConsumerAutoscaler": null,
                "kafkaConsumerBatchSize": 10485760,
                "kafkaConsumerQueueCapacity": 1000,
                "kafkaConsumerReplicas": 3,
                "logLevel": "info",
                "metrics": {
                  "ignoreTags": [
                    "flows",
                    "bytes",
                    "packets"
                  ],
                  "server": {
                    "port": 9102
                  }
                },
                "port": 2055,
                "profilePort": 6060,
                "resources": {
                  "limits": {
                    "memory": "800Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                }
              }
            }
          },
          {
            "apiVersion": "flows.netobserv.io/v1beta1",
            "kind": "FlowCollector",
            "metadata": {
              "name": "cluster"
            },
            "spec": {
              "agent": {
                "ebpf": {
                  "cacheActiveTimeout": "5s",
                  "cacheMaxFlows": 100000,
                  "excludeInterfaces": [
                    "lo"
                  ],
                  "imagePullPolicy": "IfNotPresent",
                  "interfaces": [],
                  "kafkaBatchSize": 10485760,
                  "logLevel": "info",
                  "resources": {
                    "limits": {
                      "memory": "800Mi"
                    },
                    "requests": {
                      "cpu": "100m",
                      "memory": "50Mi"
                    }
                  },
                  "sampling": 50
                },
                "type": "EBPF"
              },
              "consolePlugin": {
                "autoscaler": {
                  "maxReplicas": 3,
                  "metrics": [
                    {
                      "resource": {
                        "name": "cpu",
                        "target": {
                          "averageUtilization": 50,
                          "type": "Utilization"
                        }
                      },
                      "type": "Resource"
                    }
                  ],
                  "minReplicas": 1,
                  "status": "DISABLED"
                },
                "imagePullPolicy": "IfNotPresent",
                "logLevel": "info",
                "port": 9001,
                "portNaming": {
                  "enable": true,
                  "portNames": {
                    "3100": "loki"
                  }
                },
                "quickFilters": [
                  {
                    "default": true,
                    "filter": {
                      "dst_namespace!": "openshift-,netobserv",
                      "src_namespace!": "openshift-,netobserv"
                    },
                    "name": "Applications"
                  },
                  {
                    "filter": {
                      "dst_namespace": "openshift-,netobserv",
                      "src_namespace": "openshift-,netobserv"
                    },
                    "name": "Infrastructure"
                  },
                  {
                    "default": true,
                    "filter": {
                      "dst_kind": "Pod",
                      "src_kind": "Pod"
                    },
                    "name": "Pods network"
                  },
                  {
                    "filter": {
                      "dst_kind": "Service"
                    },
                    "name": "Services network"
                  }
                ],
                "register": true
              },
              "deploymentModel": "DIRECT",
              "exporters": [],
              "kafka": {
                "address": "kafka-cluster-kafka-bootstrap.netobserv",
                "tls": {
                  "caCert": {
                    "certFile": "ca.crt",
                    "name": "kafka-cluster-cluster-ca-cert",
                    "type": "secret"
                  },
                  "enable": false,
                  "userCert": {
                    "certFile": "user.crt",
                    "certKey": "user.key",
                    "name": "flp-kafka",
                    "type": "secret"
                  }
                },
                "topic": "network-flows"
              },
              "loki": {
                "batchSize": 10485760,
                "batchWait": "1s",
                "maxBackoff": "5s",
                "maxRetries": 2,
                "minBackoff": "1s",
                "statusTls": {
                  "caCert": {
                    "certFile": "service-ca.crt",
                    "name": "loki-ca-bundle",
                    "type": "configmap"
                  },
                  "enable": false,
                  "insecureSkipVerify": false,
                  "userCert": {
                    "certFile": "tls.crt",
                    "certKey": "tls.key",
                    "name": "loki-query-frontend-http",
                    "type": "secret"
                  }
                },
                "tls": {
                  "caCert": {
                    "certFile": "service-ca.crt",
                    "name": "loki-gateway-ca-bundle",
                    "type": "configmap"
                  },
                  "enable": false,
                  "insecureSkipVerify": false
                },
                "url": "http://loki.netobserv.svc:3100/"
              },
              "namespace": "netobserv",
              "processor": {
                "conversationEndTimeout": "10s",
                "conversationHeartbeatInterval": "30s",
                "dropUnusedFields": true,
                "imagePullPolicy": "IfNotPresent",
                "kafkaConsumerAutoscaler": null,
                "kafkaConsumerBatchSize": 10485760,
                "kafkaConsumerQueueCapacity": 1000,
                "kafkaConsumerReplicas": 3,
                "logLevel": "info",
                "logTypes": "FLOWS",
                "metrics": {
                  "disableAlerts": [],
                  "ignoreTags": [
                    "flows",
                    "bytes",
                    "packets"
                  ],
                  "server": {
                    "port": 9102
                  }
                },
                "port": 2055,
                "profilePort": 6060,
                "resources": {
                  "limits": {
                    "memory": "800Mi"
                  },
                  "requests": {
                    "cpu": "100m",
                    "memory": "100Mi"
                  }
                }
              }
            }
          }
        ]
      capabilities: Seamless Upgrades
      categories: Monitoring
      console.openshift.io/plugins: '["netobserv-plugin"]'
      containerImage: registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:910ae856998593888cadd4a4f05452b800579e7cd4254c73e03a9d41a8745164
      createdAt: 2023-04-12T13:44:37
      description: Network flows collector and monitoring solution
      operatorframework.io/cluster-monitoring: "true"
      operatorframework.io/suggested-namespace: openshift-netobserv-operator
      operators.openshift.io/valid-subscription: '["OpenShift Kubernetes Engine",
        "OpenShift Container Platform", "OpenShift Platform Plus"]'
      operators.operatorframework.io/builder: operator-sdk-v1.25.3
      operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
      repository: https://github.com/netobserv/network-observability-operator
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: FlowCollector is the Schema for the flowcollectors API, which
          pilots and configures netflow collection.
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        version: v1alpha1
      - description: FlowCollector is the Schema for the flowcollectors API, which
          pilots and configures netflow collection.
        displayName: Flow Collector
        kind: FlowCollector
        name: flowcollectors.flows.netobserv.io
        version: v1beta1
    description: |
      Network Observability is an OpenShift operator that deploys a monitoring pipeline to collect and enrich network flows that are produced by the Network Observability eBPF agent.

      The operator provides dashboards, metrics, and keeps flows accessible in a queryable log store, Grafana Loki. When a `FlowCollector` instance is created, new views are available in the Console.

      ## Dependencies

      ### Loki

      [Loki](https://grafana.com/oss/loki/), from GrafanaLabs, is the backend that is used to store all collected flows. The NetObserv Operator does not install Loki directly, however we provide some guidance to help you there.

      For normal usage, we recommend two options:

      - Installing the [Loki Operator](https://docs.openshift.com/container-platform/4.11//logging/cluster-logging-loki.html). We have written [a guide](https://github.com/netobserv/documents/blob/main/loki_operator.md) to help you through those steps. Please note that it requires configuring an object storage. Note also that the Loki Operator can also be used for [OpenShift cluster logging](https://docs.openshift.com/container-platform/4.11/logging/cluster-logging.html). If you do so, you should not share the same `LokiStack` for Logging and NetObserv.

      - Installing using [Grafana's official documentation](https://grafana.com/docs/loki/latest/). Here also we wrote a ["distributed Loki" step by step guide](https://github.com/netobserv/documents/blob/main/loki_distributed.md).

      For a quick try that is not suitable for production and not scalable (it deploys a single pod, configures a 1GB storage PVC, with 24 hours of retention), you can simply run the following commands:

      ```
      oc create namespace netobserv
      oc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/252bb624cf0425a1b66f59ce68fb939f246ef77b/examples/zero-click-loki/1-storage.yaml) -n netobserv
      oc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/252bb624cf0425a1b66f59ce68fb939f246ef77b/examples/zero-click-loki/2-loki.yaml) -n netobserv
      ```

      ### Kafka

      [Apache Kafka](https://kafka.apache.org/) can optionally be used for a more resilient and scalable architecture. You can use for instance [Strimzi](https://strimzi.io/), an operator-based distribution of Kafka for Kubernetes and OpenShift.

      ### Grafana

      [Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.

      ## Configuration

      The `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/1.0.2/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/1.0.2/config/samples/flows_v1beta1_flowcollector.yaml).

      To edit configuration in cluster, run:

      ```bash
      oc edit flowcollector cluster
      ```

      As it operates cluster-wide, only a single `FlowCollector` is allowed, and it has to be named `cluster`.

      A couple of settings deserve special attention:

      - Sampling (`spec.agent.ebpf.sampling`): a value of `100` means: one flow every 100 is sampled. `1` means all flows are sampled. The lower it is, the more flows you get, and the more accurate are derived metrics, but the higher amount of resources are consumed. By default, sampling is set to 50 (ie. 1:50). Note that more sampled flows also means more storage needed. We recommend to start with default values and refine empirically, to figure out which setting your cluster can manage.

      - Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you may have to configure differently if you used another installation method.

      - Quick filters (`spec.consolePlugin.quickFilters`): configure preset filters to be displayed in the Console plugin. They offer a way to quickly switch from filters to others, such as showing / hiding pods network, or infrastructure network, or application network, etc. They can be tuned to reflect the different workloads running on your cluster. For a list of available filters, [check this page](https://github.com/netobserv/network-observability-operator/blob/1.0.2/docs/QuickFilters.md).

      - Kafka (`spec.deploymentModel: KAFKA` and `spec.kafka`): when enabled, integrates the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Kafka can provide better scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)). Assumes Kafka is already deployed and a topic is created.

      - Exporters (`spec.exporters`, _experimental_) an optional list of exporters to which to send enriched flows. Currently only KAFKA is supported. This allows you to define any custom storage or processing that can read from Kafka. This feature is flagged as _experimental_ as it has not been thoroughly or stress tested yet, so use at your own risk.

      ## Further reading

      Please refer to the documentation on GitHub for more information.

      This documentation includes:

      - An [overview](https://github.com/netobserv/network-observability-operator#openshift-console) of the features, with screenshots
      - A [performance](https://github.com/netobserv/network-observability-operator#performance-fine-tuning) section, for fine-tuning
      - A [security](https://github.com/netobserv/network-observability-operator#securing-data-and-communications) section
      - An [F.A.Q.](https://github.com/netobserv/network-observability-operator#faq--troubleshooting) section
    displayName: Network observability
    installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - network observability
    - ebpf
    - flow tracing
    - flows
    - topology
    - network
    - observability
    links:
    - name: Project page
      url: https://github.com/netobserv/network-observability-operator
    - name: Issue tracker
      url: https://github.com/netobserv/network-observability-operator/issues
    - name: Discussion board
      url: https://github.com/netobserv/network-observability-operator/discussions
    maintainers:
    - email: jtakvori@redhat.com
      name: Joel Takvorian
    - email: jpinsonn@redhat.com
      name: Julien Pinsonneau
    - email: mmaciasl@redhat.com
      name: Mario Macias
    - email: ocazade@redhat.com
      name: Olivier Cazade
    maturity: stable
    minKubeVersion: 1.23.0
    provider:
      name: Red Hat
      url: https://www.redhat.com
relatedImages:
- image: registry.redhat.io/network-observability/network-observability-console-plugin-rhel9@sha256:e9045a36eb87e29c01137af2d32c2d45500758e9c2b562a058f3322312282d6b
  name: console_plugin
- image: registry.redhat.io/network-observability/network-observability-ebpf-agent-rhel9@sha256:44704b988afdda0c032e5286aa80f13c2f9c4f0a6923103289ad985cb0556d49
  name: ebpf_agent
- image: registry.redhat.io/network-observability/network-observability-flowlogs-pipeline-rhel9@sha256:2732966fe5bc252c0c9e6f0ec0c3f03761327f5ef095369584b32ef54cf35511
  name: flowlogs_pipeline
- image: registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:9ba226d0207edd7c9173333647353d3a7a0b5bfc32feb60ca5749dd6dc190c28
  name: ""
- image: registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:910ae856998593888cadd4a4f05452b800579e7cd4254c73e03a9d41a8745164
  name: network-observability-rhel9-operator-910ae856998593888cadd4a4f05452b800579e7cd4254c73e03a9d41a8745164-annotation
- image: registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:910ae856998593888cadd4a4f05452b800579e7cd4254c73e03a9d41a8745164
  name: manager
- image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:c9b7a51fccd409451fe5cae7bd15abc00e10c9ac1a2e97232172d39134db9254
  name: kube-rbac-proxy
schema: olm.bundle
